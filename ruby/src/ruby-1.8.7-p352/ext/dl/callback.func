static void
rb_dl_callback_func_0_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static void
rb_dl_callback_func_0_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(0),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  /* no return value */
}

static char
rb_dl_callback_func_1_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static char
rb_dl_callback_func_1_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(1),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2CHR(retval);
}

static short
rb_dl_callback_func_2_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static short
rb_dl_callback_func_2_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(2),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return FIX2INT(retval);
}

static int
rb_dl_callback_func_3_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static int
rb_dl_callback_func_3_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(3),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static long
rb_dl_callback_func_4_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(4),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return NUM2INT(retval);
}

static float
rb_dl_callback_func_5_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static float
rb_dl_callback_func_5_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(5),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return (float)(RFLOAT(retval)->value);
}

static double
rb_dl_callback_func_6_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static double
rb_dl_callback_func_6_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(6),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return RFLOAT(retval)->value;
}

static void *
rb_dl_callback_func_7_0(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(0)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_1(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(1)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_2(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(2)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_3(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(3)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_4(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(4)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_5(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(5)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_6(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(6)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_7(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(7)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_8(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(8)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

static void *
rb_dl_callback_func_7_9(long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long arg7, long arg8, long arg9, long arg10, long arg11, long arg12, long arg13, long arg14)
{
  VALUE retval, proto, proc, obj;
  VALUE argv[15];
  int  argc;
  long buff[15];

  buff[0] = arg0;
  buff[1] = arg1;
  buff[2] = arg2;
  buff[3] = arg3;
  buff[4] = arg4;
  buff[5] = arg5;
  buff[6] = arg6;
  buff[7] = arg7;
  buff[8] = arg8;
  buff[9] = arg9;
  buff[10] = arg10;
  buff[11] = arg11;
  buff[12] = arg12;
  buff[13] = arg13;
  buff[14] = arg14;

  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(7),INT2NUM(9)));
  if(NIL_P(obj))
    rb_raise(rb_eDLError, "callback function does not exist in DL::FuncTable");
  Check_Type(obj, T_ARRAY);
  proto = rb_ary_entry(obj, 0);
  proc  = rb_ary_entry(obj, 1);
  Check_Type(proto, T_STRING);
  if( RSTRING(proto)->len >= 15 )
    rb_raise(rb_eArgError, "too many arguments");
  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);
  retval = rb_funcall2(proc, id_call, argc, argv);

  return rb_dlptr2cptr(retval);
}

