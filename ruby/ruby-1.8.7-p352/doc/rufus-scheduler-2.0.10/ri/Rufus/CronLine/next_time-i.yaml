--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns the next time that this cron line is supposed to 'fire'
- !ruby/struct:SM::Flow::P 
  body: This is raw, 3 secs to iterate over 1 year on my macbook :( brutal. (Well, I was wrong, takes 0.001 sec on 1.8.7 and 1.9.1)
- !ruby/struct:SM::Flow::P 
  body: This method accepts an optional Time parameter. It's the starting point for the 'search'. By default, it's Time.now
- !ruby/struct:SM::Flow::P 
  body: Note that the time instance returned will be in the same time zone that the given start point Time (thus a result in the local time zone will be passed if no start time is specified (search start time set to Time.now))
- !ruby/struct:SM::Flow::VERB 
  body: "  Rufus::CronLine.new('30 7 * * *').next_time(\n    Time.mktime(2008, 10, 24, 7, 29))\n  #=&gt; Fri Oct 24 07:30:00 -0500 2008\n\n  Rufus::CronLine.new('30 7 * * *').next_time(\n    Time.utc(2008, 10, 24, 7, 29))\n  #=&gt; Fri Oct 24 07:30:00 UTC 2008\n\n  Rufus::CronLine.new('30 7 * * *').next_time(\n    Time.utc(2008, 10, 24, 7, 29)).localtime\n  #=&gt; Fri Oct 24 02:30:00 -0500 2008\n"
- !ruby/struct:SM::Flow::P 
  body: (Thanks to K Liu for the note and the examples)
full_name: Rufus::CronLine#next_time
is_singleton: false
name: next_time
params: (now=Time.now)
visibility: public
